# Run when commits are pushed to main
on:
  workflow_dispatch:
  push:
    # Run when commits are pushed to mainline branch (main or master)
    # Set this to the mainline branch you are using
    branches:
      - main

# Set up permissions for deploying with secretless Azure federated credentials
# https://learn.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-portal%2Clinux#set-up-azure-login-with-openid-connect-authentication
permissions:
  id-token: write
  contents: read


jobs:
  build:
    runs-on: ubuntu-latest
    env:
      AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
      AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install azd
        uses: Azure/setup-azd@v2
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create .env.production file
        run: |
          # Create placeholder .env.production - connection string will be retrieved during deployment
          echo "# Application Insights connection string will be populated during deployment" > .env.production
          echo "VITE_APPINSIGHTS_CONNECTION_STRING=" >> .env.production
          echo "✅ .env.production file created (connection string will be set during deployment)"
        shell: bash

      - name: Log in with Azure (Federated Credentials)
        run: |
          azd auth login `
            --client-id "$Env:AZURE_CLIENT_ID" `
            --federated-credential-provider "github" `
            --tenant-id "$Env:AZURE_TENANT_ID"
        shell: pwsh

      - name: Deploy with Image Upsert Technique
        run: |
          echo "🚀 Starting deployment with image upsert technique..."
          echo "Expected deployment time: ~2-3 minutes (vs 8-10+ minutes traditional)"
          
          $startTime = Get-Date
          azd up --no-prompt
          $endTime = Get-Date
          $duration = $endTime - $startTime
          
          echo ""
          echo "🎉 Deployment completed!"
          echo "⏱️ Total deployment time: $($duration.TotalMinutes.ToString('F1')) minutes"
          echo "🚀 Image upsert technique performance confirmed!"
        shell: pwsh
        
