name: Deploy Finelle UI to Azure Container Apps

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ closed ]
  workflow_dispatch:

env:
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  CONTAINER_REGISTRY_LOGIN_SERVER: ${{ vars.CONTAINER_REGISTRY_LOGIN_SERVER }} # optional, will be overwritten by IaC outputs
  RESOURCE_GROUP: ${{ vars.RESOURCE_GROUP }}

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.merged == true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Node 22 + clean npm cache + lock fix you already applied earlier
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - name: Prep clean npm cache + retries
        run: |
          npm config set cache "$(mktemp -d)"
          npm config set fetch-retries 5
          npm config set fetch-retry-mintimeout 20000
          npm config set fetch-retry-maxtimeout 600000
          npm config set fetch-timeout 600000
          npm config set registry https://registry.npmjs.org/
          node -v
          npm -v
          npm cache verify || true

      - name: Bump @types/react to safe patch (CI-only) and regenerate lockfile
        run: |
          npm pkg set "devDependencies.@types/react=18.3.19" || true
          npm pkg set "dependencies.@types/react=18.3.19" || true
          rm -f package-lock.json
          npm install --package-lock-only

      - name: Install dependencies
        run: npm ci --prefer-online --no-audit --no-fund

      - name: Run tests
        run: npm test -- --coverage --watchAll=false

      - name: Build application
        run: npm run build

      # ---- Azure login & RG-scope deployment (matches your Bicep) ----
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Ensure resource group exists
        run: |
          az group create -n "${{ env.RESOURCE_GROUP }}" -l "eastus2" --only-show-errors

      # (Optional) Only deploy infra when changed or on manual run
      - name: Check for infrastructure changes
        id: infra-changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            infra:
              - 'infrastructure/**'

      - name: Deploy infrastructure (resource group scope)
        if: steps.infra-changes.outputs.infra == 'true' || github.event_name == 'workflow_dispatch'
        id: rg-deploy
        run: |
          DEPLOYMENT_NAME="finelle-ui-rg-$(date +%Y%m%d-%H%M%S)"
          az deployment group create \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --name "$DEPLOYMENT_NAME" \
            --template-file infrastructure/main.bicep \
            --parameters location="eastus2" \
            --only-show-errors

          # Read outputs straight from the RG deployment
          ACR_LOGIN_SERVER=$(az deployment group show \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --name "$DEPLOYMENT_NAME" \
            --query "properties.outputs.containerRegistryLoginServer.value" -o tsv)

          CONTAINER_APP_NAME=$(az deployment group show \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --name "$DEPLOYMENT_NAME" \
            --query "properties.outputs.containerAppName.value" -o tsv)

          echo "acr-login-server=$ACR_LOGIN_SERVER" >> $GITHUB_OUTPUT
          echo "container-app-name=$CONTAINER_APP_NAME" >> $GITHUB_OUTPUT

      # If infra wasn't redeployed, look up existing outputs from the RG (ACR + Container App)
      - name: Resolve ACR & Container App when infra not redeployed
        if: steps.infra-changes.outputs.infra != 'true' && github.event_name != 'workflow_dispatch'
        id: resolve-existing
        run: |
          # Try to infer from resources in the RG (names are deterministic in your Bicep)
          # ACR login server:
          ACR_LOGIN_SERVER=$(az acr list -g "${{ env.RESOURCE_GROUP }}" --query "[0].loginServer" -o tsv)
          # Container App name:
          CONTAINER_APP_NAME=$(az containerapp list -g "${{ env.RESOURCE_GROUP }}" --query "[0].name" -o tsv)

          if [ -z "$ACR_LOGIN_SERVER" ] || [ -z "$CONTAINER_APP_NAME" ]; then
            echo "::error::ACR or Container App not found. Re-run with infra deploy or check the RG."
            exit 1
          fi

          echo "acr-login-server=$ACR_LOGIN_SERVER" >> $GITHUB_OUTPUT
          echo "container-app-name=$CONTAINER_APP_NAME" >> $GITHUB_OUTPUT

      # Select the effective outputs (from deploy step if it ran, else from resolve-existing)
      - name: Set effective outputs
        id: effective
        run: |
          echo "acr-login-server=${{ steps.rg-deploy.outputs.acr-login-server || steps.resolve-existing.outputs.acr-login-server }}" >> $GITHUB_OUTPUT
          echo "container-app-name=${{ steps.rg-deploy.outputs.container-app-name || steps.resolve-existing.outputs.container-app-name }}" >> $GITHUB_OUTPUT

      # ---- Build & push using the ACR created by Bicep ----
      - name: Build and push Docker image
        run: |
          REGISTRY_LOGIN_SERVER="${{ steps.effective.outputs.acr-login-server }}"
          REGISTRY_NAME="$(echo "$REGISTRY_LOGIN_SERVER" | cut -d. -f1)"

          az acr login --name "$REGISTRY_NAME"

          docker build -t "$REGISTRY_LOGIN_SERVER/finelle-ui:${{ github.sha }}" .
          docker tag   "$REGISTRY_LOGIN_SERVER/finelle-ui:${{ github.sha }}" "$REGISTRY_LOGIN_SERVER/finelle-ui:latest"

          docker push  "$REGISTRY_LOGIN_SERVER/finelle-ui:${{ github.sha }}"
          docker push  "$REGISTRY_LOGIN_SERVER/finelle-ui:latest"

      - name: Update Container App
        run: |
          az containerapp update \
            --name "${{ steps.effective.outputs.container-app-name }}" \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --image "${{ steps.effective.outputs.acr-login-server }}/finelle-ui:${{ github.sha }}" \
            --only-show-errors

      - name: Get application URL
        id: get-url
        run: |
          APP_URL=$(az containerapp show \
            --name "${{ steps.effective.outputs.container-app-name }}" \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --query "properties.configuration.ingress.fqdn" -o tsv)
          echo "app-url=https://$APP_URL" >> $GITHUB_OUTPUT
          echo "### ðŸš€ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "Application URL: https://$APP_URL" >> $GITHUB_STEP_SUMMARY

      - name: Deployment Summary
        run: |
          echo "::notice::Application URL: ${{ steps.get-url.outputs.app-url }}"
          echo "::notice::Container Image: ${{ steps.effective.outputs.acr-login-server }}/finelle-ui:${{ github.sha }}"