name: Deploy Finelle UI to Azure Container Apps

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ closed ]
  workflow_dispatch:
    inputs:
      bootstrap:
        description: 'Run initial bootstrap (first time setup)'
        required: false
        default: false
        type: boolean

env:
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_ENV_NAME: finelle-fresh

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.merged == true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - name: Prep clean npm cache + retries
        run: |
          npm config set cache "$(mktemp -d)"
          npm config set fetch-retries 5
          npm config set fetch-retry-mintimeout 20000
          npm config set fetch-retry-maxtimeout 600000
          npm config set fetch-timeout 600000
          npm config set registry https://registry.npmjs.org/
          node -v
          npm -v
          npm cache verify || true

      - name: Bump @types/react to safe patch (CI-only) and regenerate lockfile
        run: |
          npm pkg set "devDependencies.@types/react=18.3.19" || true
          npm pkg set "dependencies.@types/react=18.3.19" || true
          rm -f package-lock.json
          npm install --package-lock-only

      - name: Install dependencies
        run: npm ci --prefer-online --no-audit --no-fund

      - name: Run tests
        run: npm test -- --coverage --watchAll=false

      # Install Azure Developer CLI
      - name: Install Azure Developer CLI
        run: |
          curl -fsSL https://aka.ms/install-azd.sh | bash

      # Debug: Check if secrets are available
      - name: Debug - Verify Secrets
        run: |
          echo "Checking if secrets are properly set..."
          if [ -z "${{ secrets.AZURE_CLIENT_ID }}" ]; then
            echo "❌ AZURE_CLIENT_ID is empty or not set"
          else
            echo "✅ AZURE_CLIENT_ID is set (length: ${#AZURE_CLIENT_ID})"
          fi
          
          if [ -z "${{ secrets.AZURE_TENANT_ID }}" ]; then
            echo "❌ AZURE_TENANT_ID is empty or not set"
          else
            echo "✅ AZURE_TENANT_ID is set (length: ${#AZURE_TENANT_ID})"
          fi
          
          if [ -z "${{ secrets.AZURE_SUBSCRIPTION_ID }}" ]; then
            echo "❌ AZURE_SUBSCRIPTION_ID is empty or not set"
          else
            echo "✅ AZURE_SUBSCRIPTION_ID is set (length: ${#AZURE_SUBSCRIPTION_ID})"
          fi
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Azure login using OIDC
      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        env:
          # Explicitly set environment variables as backup
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Bootstrap: Initial setup for first-time deployment
      - name: Bootstrap Azure Environment (First Time Setup)
        if: github.event.inputs.bootstrap == 'true' || github.event_name == 'workflow_dispatch'
        run: |
          echo "🚀 Bootstrapping Azure environment..."
          
          # Set azd environment
          azd env select ${{ env.AZURE_ENV_NAME }} --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} || azd env new ${{ env.AZURE_ENV_NAME }} --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          
          # Set required environment variables for azd
          azd env set AZURE_LOCATION eastus2
          azd env set AZURE_SUBSCRIPTION_ID ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          
          # Initial provision - this creates all Azure resources
          azd provision --no-prompt
          
          echo "✅ Bootstrap completed successfully!"

      # Regular deployment: Use existing environment
      - name: Select Azure Environment
        if: github.event.inputs.bootstrap != 'true'
        run: |
          echo "📦 Using existing Azure environment..."
          azd env select ${{ env.AZURE_ENV_NAME }} --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Build with Application Insights connection string
      - name: Build application with telemetry
        run: |
          echo "🏗️ Building application with Application Insights..."
          
          # Get Application Insights connection string from azd environment
          CONNECTION_STRING=$(azd env get-values | grep applicationInsightsConnectionString | cut -d'=' -f2 | tr -d '"')
          
          if [ -n "$CONNECTION_STRING" ]; then
            echo "✅ Application Insights connection string found"
            echo "VITE_APPINSIGHTS_CONNECTION_STRING=$CONNECTION_STRING" > .env.production
            echo "✅ Created .env.production file"
          else
            echo "⚠️ Application Insights connection string not found, proceeding without telemetry"
          fi
          
          # Build the application
          npm run build
          
          # Verify connection string is embedded
          if grep -r "InstrumentationKey" dist/assets/*.js 2>/dev/null; then
            echo "✅ Application Insights connection string embedded in build"
          else
            echo "⚠️ Application Insights connection string not found in build"
          fi

      # Deploy using Azure Developer CLI
      - name: Deploy to Azure
        run: |
          echo "🚀 Deploying to Azure Container Apps..."
          azd deploy --no-prompt
          
          # Get the application URL
          APP_URL=$(azd show --output json | jq -r '.services.ui.project.endpoints[0]')
          echo "app_url=$APP_URL" >> $GITHUB_OUTPUT
          
          echo "### 🚀 Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "Application URL: $APP_URL" >> $GITHUB_STEP_SUMMARY
          echo "Telemetry: Application Insights enabled" >> $GITHUB_STEP_SUMMARY

      - name: Deployment Summary
        run: |
          APP_URL=$(azd show --output json | jq -r '.services.ui.project.endpoints[0]')
          echo "::notice::Application URL: $APP_URL"
          echo "::notice::Environment: ${{ env.AZURE_ENV_NAME }}"
          echo "::notice::Deployment completed successfully!"